package ngrams;

import java.util.*;

/**
 * An object for mapping a year number (e.g. 1996) to numerical data. Provides
 * utility methods useful for data analysis.
 */
public class TimeSeries extends TreeMap<Integer, Double> {

    public static final int MIN_YEAR = 1400;
    public static final int MAX_YEAR = 2100;

    public TimeSeries() {
        super();
    }

    /**
     * Creates a copy of TS, but only between STARTYEAR and ENDYEAR,
     * inclusive of both end points.
     */
    public TimeSeries(TimeSeries ts, int startYear, int endYear) {
        super();
        for (int i = startYear; i <= endYear; i++) {
            if (ts.containsKey(i)) {
                this.put(i, ts.get(i));
            }
        }
    }

    /**
     * Returns all years for this TimeSeries (in any order).
     */
    public List<Integer> years() {
        return new ArrayList<>(this.keySet());
    }

    /**
     * Returns all data for this TimeSeries (in any order).
     * Same order as years().
     */
    public List<Double> data() {
        List<Double> dataSet = new ArrayList<>();
        for (int x : years()) {
            dataSet.add(this.get(x));
        }
        return dataSet;
    }

    /**
     * Returns the year-wise sum of this TimeSeries with the given TS. 
     * For each year, sum the data from this TimeSeries with the data from TS. 
     * Returens a new TimeSeries (does not modify this TimeSeries).
     *
     * If both TimeSeries don't contain any years, return an empty TimeSeries.
     * If one TimeSeries contains a year that the other one doesn't, the returned TimeSeries
     * should store the value from the TimeSeries that contains that year.
     */
    public TimeSeries plus(TimeSeries ts) {
        TimeSeries newTS = new TimeSeries();
        HashSet<Integer> allYears = new HashSet<Integer>();
        allYears.addAll(this.keySet());
        allYears.addAll(ts.keySet());
        for (int x : allYears) {
            if (this.containsKey(x) && ts.containsKey(x)) {
                double totalData = this.get(x) + ts.get(x);
                newTS.put(x, totalData);
            } else if (this.containsKey(x) && !ts.containsKey(x)) {
                newTS.put(x, this.get(x));
            } else if (!this.containsKey(x) && ts.containsKey(x)) {
                newTS.put(x, ts.get(x));
            }
        }
        return newTS;
    }

    /**
     * Returns the quotient of the value for each year this TimeSeries divided by the
     * value for the same year in TS. Should return a new TimeSeries (does not modify this
     * TimeSeries).
     *
     * If TS is missing a year that exists in this TimeSeries, throw an
     * IllegalArgumentException.
     * If TS has a year that is not in this TimeSeries, ignore it.
     */
    public TimeSeries dividedBy(TimeSeries ts) {
        TimeSeries newTS = new TimeSeries();
        for (int x : years()) {
            if (!ts.containsKey(x)) {
                throw new IllegalArgumentException();
            }
            double quotient = this.get(x) / ts.get(x);
            newTS.put(x, quotient);
        }
        return newTS;
    }
}
