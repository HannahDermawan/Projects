import java.util.List;
import java.util.ArrayList; // import the ArrayList class

public class LinkedListDeque61B<T> implements Deque61B<T> {
    private class Node {
        private T item;
        private Node next;
        private Node prev;

        public Node(Node p, T i, Node n) {
            item = i;
            prev = p;
            next = n;
        }
    }
    int size = 0;
    private Node sentinel;
    public LinkedListDeque61B() {
        sentinel = new Node(null, null, null);
        sentinel.prev = sentinel;
        sentinel.next = sentinel;
    }

    @Override
    public void addFirst(T x) {
        Node first = new Node(sentinel, x, sentinel.next);
        sentinel.next.prev = first;
        sentinel.next = first;
        size += 1;
    }

    @Override
    public void addLast(T x) {
        Node last = new Node(sentinel.prev, x, sentinel);
        sentinel.prev.next = last;
        sentinel.prev = last;
        size += 1;
    }
    @Override
    public List<T> toList() {
        List<T> returnList = new ArrayList<>();
        Node current = sentinel.next;
        while (current != sentinel) {
            returnList.add(current.item);
            current = current.next;
        }
        return returnList;
    }

    @Override
    public boolean isEmpty() {
        if (sentinel.next == sentinel) {
            return true;
        }
        return false;
    }

    @Override
    public int size() {
        return size;
    }

    @Override
    public T removeFirst() {
        if (sentinel.next == sentinel) {
            return null;
        } else {
            T first = sentinel.next.item;
            sentinel.next.next.prev = sentinel;
            sentinel.next = sentinel.next.next;
            size -= 1;
            return first;
        }

    }

    @Override
    public T removeLast() {
        if (sentinel.next == sentinel) {
            return null;
        } else {
            T last = sentinel.prev.item;
            sentinel.prev.prev.next = sentinel;
            sentinel.prev = sentinel.prev.prev;
            size -= 1;
            return last;
        }

    }

    @Override
    public T get(int index) {
        Node current = sentinel.next;
        if (index > size || index < 0) {
            return null;
        } else {
            while (index != 0) {
                index -= 1;
                current = current.next;
            }
            return current.item;
        }
    }

    @Override
    public T getRecursive(int index) {
        Node current = sentinel.next;
        if (index > size || index < 0) {
            return null;
        } else {
            return getRecursiveHelper(current, index);
        }
    }

    private T getRecursiveHelper(Node current, int index) {
        if (index != 0) {
            index -= 1;
            return getRecursiveHelper(current.next, index);
        }
        return current.item;
    }


}
